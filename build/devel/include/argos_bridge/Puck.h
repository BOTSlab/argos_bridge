// Generated by gencpp from file argos_bridge/Puck.msg
// DO NOT EDIT!


#ifndef ARGOS_BRIDGE_MESSAGE_PUCK_H
#define ARGOS_BRIDGE_MESSAGE_PUCK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace argos_bridge
{
template <class ContainerAllocator>
struct Puck_
{
  typedef Puck_<ContainerAllocator> Type;

  Puck_()
    : type(0)
    , range(0.0)
    , angle(0.0)  {
    }
  Puck_(const ContainerAllocator& _alloc)
    : type(0)
    , range(0.0)
    , angle(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _type_type;
  _type_type type;

   typedef float _range_type;
  _range_type range;

   typedef float _angle_type;
  _angle_type angle;





  typedef boost::shared_ptr< ::argos_bridge::Puck_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::argos_bridge::Puck_<ContainerAllocator> const> ConstPtr;

}; // struct Puck_

typedef ::argos_bridge::Puck_<std::allocator<void> > Puck;

typedef boost::shared_ptr< ::argos_bridge::Puck > PuckPtr;
typedef boost::shared_ptr< ::argos_bridge::Puck const> PuckConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::argos_bridge::Puck_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::argos_bridge::Puck_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::argos_bridge::Puck_<ContainerAllocator1> & lhs, const ::argos_bridge::Puck_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.range == rhs.range &&
    lhs.angle == rhs.angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::argos_bridge::Puck_<ContainerAllocator1> & lhs, const ::argos_bridge::Puck_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace argos_bridge

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::argos_bridge::Puck_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::argos_bridge::Puck_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::argos_bridge::Puck_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::argos_bridge::Puck_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::argos_bridge::Puck_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::argos_bridge::Puck_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::argos_bridge::Puck_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5678c53e9498ce2896027816b599c523";
  }

  static const char* value(const ::argos_bridge::Puck_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5678c53e9498ce28ULL;
  static const uint64_t static_value2 = 0x96027816b599c523ULL;
};

template<class ContainerAllocator>
struct DataType< ::argos_bridge::Puck_<ContainerAllocator> >
{
  static const char* value()
  {
    return "argos_bridge/Puck";
  }

  static const char* value(const ::argos_bridge::Puck_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::argos_bridge::Puck_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 type\n"
"float32 range\n"
"float32 angle\n"
;
  }

  static const char* value(const ::argos_bridge::Puck_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::argos_bridge::Puck_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.range);
      stream.next(m.angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Puck_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::argos_bridge::Puck_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::argos_bridge::Puck_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
    s << indent << "range: ";
    Printer<float>::stream(s, indent + "  ", v.range);
    s << indent << "angle: ";
    Printer<float>::stream(s, indent + "  ", v.angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARGOS_BRIDGE_MESSAGE_PUCK_H
